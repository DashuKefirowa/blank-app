import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
from sklearn.linear_model import LinearRegression, Ridge, Lasso, HuberRegressor, RANSACRegressor
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.pipeline import make_pipeline
from sklearn.neural_network import MLPRegressor
from scipy.interpolate import UnivariateSpline
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from sklearn.model_selection import train_test_split
import io

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
def calculate_metrics(y_true, y_pred):
    metrics = {
        "R2": r2_score(y_true, y_pred),
        "MSE": mean_squared_error(y_true, y_pred),
        "RMSE": np.sqrt(mean_squared_error(y_true, y_pred)),
        "MAE": mean_absolute_error(y_true, y_pred),
    }
    # MAPE —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    mask = y_true != 0
    if np.any(mask):
        metrics["MAPE"] = 100 * np.mean(np.abs((y_true[mask] - y_pred[mask]) / y_true[mask]))
    else:
        metrics["MAPE"] = float('nan')
    return metrics

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
def build_regression(model_name, X_train, y_train, X_test):
    if model_name == "–õ–∏–Ω–µ–π–Ω–∞—è":
        model = LinearRegression()
    elif model_name == "–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è (—Å—Ç–µ–ø–µ–Ω—å=2)":
        model = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())
    elif model_name == "–ì—Ä–µ–±–Ω–µ–≤–∞—è (Ridge)":
        model = Ridge(alpha=1.0)
    elif model_name == "–õ–∞—Å—Å–æ (Lasso)":
        model = Lasso(alpha=0.1)
    elif model_name == "–•—å—é–±–µ—Ä (Huber)":
        model = HuberRegressor()
    elif model_name == "RANSAC":
        model = RANSACRegressor()
    elif model_name == "–°–ø–ª–∞–π–Ω (–∫—É–±–∏—á–µ—Å–∫–∏–π)":
        spline = UnivariateSpline(X_train.flatten(), y_train, k=3)
        return spline(X_test.flatten())
    elif model_name == "–ù–µ–π—Ä–æ—Å–µ—Ç—å (MLP)":
        model = MLPRegressor(hidden_layer_sizes=(50, 20), max_iter=1000, random_state=42)
    
    model.fit(X_train, y_train)
    return model.predict(X_test)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏", layout="wide")
st.title("üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel", type=["xlsx", "xls"])
if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤
        cols = df.columns.tolist()
        col1, col2 = st.columns(2)
        
        with col1:
            target = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (Y):", cols)
        with col2:
            feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ (X):", cols)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X = df[[feature]].values
        y = df[target].values
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        models = [
            "–õ–∏–Ω–µ–π–Ω–∞—è",
            "–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è (—Å—Ç–µ–ø–µ–Ω—å=2)",
            "–ì—Ä–µ–±–Ω–µ–≤–∞—è (Ridge)",
            "–õ–∞—Å—Å–æ (Lasso)",
            "–•—å—é–±–µ—Ä (Huber)",
            "RANSAC",
            "–°–ø–ª–∞–π–Ω (–∫—É–±–∏—á–µ—Å–∫–∏–π)",
            "–ù–µ–π—Ä–æ—Å–µ—Ç—å (MLP)"
        ]
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:", models)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏—é"):
            with st.spinner("–ò–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                y_pred = build_regression(selected_model, X_train, y_train, X_test)
                
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                metrics = calculate_metrics(y_test, y_pred)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
                col1, col2, col3, col4, col5 = st.columns(5)
                col1.metric("R¬≤", f"{metrics['R2']:.3f}")
                col2.metric("MSE", f"{metrics['MSE']:.3f}")
                col3.metric("RMSE", f"{metrics['RMSE']:.3f}")
                col4.metric("MAE", f"{metrics['MAE']:.3f}")
                col5.metric("MAPE", f"{metrics.get('MAPE', 'N/A'):.3f}%")
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
                fig, ax = plt.subplots(figsize=(10, 6))
                
                # –¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                ax.scatter(X, y, color='blue', alpha=0.5, label='–î–∞–Ω–Ω—ã–µ')
                
                # –õ–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                x_plot = np.linspace(X.min(), X.max(), 300).reshape(-1, 1)
                if selected_model == "–°–ø–ª–∞–π–Ω (–∫—É–±–∏—á–µ—Å–∫–∏–π)":
                    spline = UnivariateSpline(X_train.flatten(), y_train, k=3)
                    y_plot = spline(x_plot.flatten())
                else:
                    model = None
                    if selected_model == "–õ–∏–Ω–µ–π–Ω–∞—è":
                        model = LinearRegression()
                    elif selected_model == "–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è (—Å—Ç–µ–ø–µ–Ω—å=2)":
                        model = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())
                    # ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π)
                    
                    if model is not None:
                        model.fit(X_train, y_train)
                        y_plot = model.predict(x_plot)
                
                ax.plot(x_plot, y_plot, color='red', linewidth=2, label=selected_model)
                ax.set_xlabel(feature)
                ax.set_ylabel(target)
                ax.legend()
                ax.grid(True)
                
                st.pyplot(fig)
                
                # –í—ã–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                if selected_model in ["–õ–∏–Ω–µ–π–Ω–∞—è", "–ì—Ä–µ–±–Ω–µ–≤–∞—è (Ridge)", "–õ–∞—Å—Å–æ (Lasso)"]:
                    st.subheader("üîç –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏")
                    if hasattr(model, 'coef_'):
                        coef_df = pd.DataFrame({
                            "–ü—Ä–∏–∑–Ω–∞–∫": [feature],
                            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": [model.coef_[0]],
                            "Intercept": [model.intercept_]
                        })
                        st.dataframe(coef_df)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
with st.sidebar:
    st.markdown("## –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    st.markdown("""
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏
    2. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (Y)
    3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ (X)
    4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    5. –ù–∞–∂–º–∏—Ç–µ "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏—é"
    """)
    st.markdown("## –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
    st.markdown("""
    - –õ–∏–Ω–µ–π–Ω–∞—è
    - –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è (—Å—Ç–µ–ø–µ–Ω—å 2)
    - –ì—Ä–µ–±–Ω–µ–≤–∞—è (Ridge)
    - –õ–∞—Å—Å–æ (Lasso)
    - –•—å—é–±–µ—Ä (Huber)
    - RANSAC
    - –°–ø–ª–∞–π–Ω (–∫—É–±–∏—á–µ—Å–∫–∏–π)
    - –ù–µ–π—Ä–æ—Å–µ—Ç—å (MLP)
    """)

if __name__ == "__main__":
    pass
